/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as MessagesRouteImport } from './routes/messages'
import { Route as HomeRouteImport } from './routes/home'
import { Route as FlowRouteImport } from './routes/flow'
import { Route as FilesRouteImport } from './routes/files'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as CalendarRouteImport } from './routes/calendar'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsTestsRouteImport } from './routes/projects/tests'
import { Route as ProjectsTasksRouteImport } from './routes/projects/tasks'
import { Route as DashboardReportsRouteImport } from './routes/dashboard/reports'
import { Route as DashboardAnalyticsRouteImport } from './routes/dashboard/analytics'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const MessagesRoute = MessagesRouteImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const FlowRoute = FlowRouteImport.update({
  id: '/flow',
  path: '/flow',
  getParentRoute: () => rootRouteImport,
} as any)
const FilesRoute = FilesRouteImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarRoute = CalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsTestsRoute = ProjectsTestsRouteImport.update({
  id: '/tests',
  path: '/tests',
  getParentRoute: () => ProjectsRoute,
} as any)
const ProjectsTasksRoute = ProjectsTasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => ProjectsRoute,
} as any)
const DashboardReportsRoute = DashboardReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAnalyticsRoute = DashboardAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/files': typeof FilesRoute
  '/flow': typeof FlowRoute
  '/home': typeof HomeRoute
  '/messages': typeof MessagesRoute
  '/notifications': typeof NotificationsRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/reports': typeof DashboardReportsRoute
  '/projects/tasks': typeof ProjectsTasksRoute
  '/projects/tests': typeof ProjectsTestsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/files': typeof FilesRoute
  '/flow': typeof FlowRoute
  '/home': typeof HomeRoute
  '/messages': typeof MessagesRoute
  '/notifications': typeof NotificationsRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/reports': typeof DashboardReportsRoute
  '/projects/tasks': typeof ProjectsTasksRoute
  '/projects/tests': typeof ProjectsTestsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/files': typeof FilesRoute
  '/flow': typeof FlowRoute
  '/home': typeof HomeRoute
  '/messages': typeof MessagesRoute
  '/notifications': typeof NotificationsRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/reports': typeof DashboardReportsRoute
  '/projects/tasks': typeof ProjectsTasksRoute
  '/projects/tests': typeof ProjectsTestsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/calendar'
    | '/dashboard'
    | '/files'
    | '/flow'
    | '/home'
    | '/messages'
    | '/notifications'
    | '/projects'
    | '/settings'
    | '/dashboard/analytics'
    | '/dashboard/reports'
    | '/projects/tasks'
    | '/projects/tests'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/calendar'
    | '/dashboard'
    | '/files'
    | '/flow'
    | '/home'
    | '/messages'
    | '/notifications'
    | '/projects'
    | '/settings'
    | '/dashboard/analytics'
    | '/dashboard/reports'
    | '/projects/tasks'
    | '/projects/tests'
  id:
    | '__root__'
    | '/'
    | '/calendar'
    | '/dashboard'
    | '/files'
    | '/flow'
    | '/home'
    | '/messages'
    | '/notifications'
    | '/projects'
    | '/settings'
    | '/dashboard/analytics'
    | '/dashboard/reports'
    | '/projects/tasks'
    | '/projects/tests'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CalendarRoute: typeof CalendarRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  FilesRoute: typeof FilesRoute
  FlowRoute: typeof FlowRoute
  HomeRoute: typeof HomeRoute
  MessagesRoute: typeof MessagesRoute
  NotificationsRoute: typeof NotificationsRoute
  ProjectsRoute: typeof ProjectsRouteWithChildren
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/messages': {
      id: '/messages'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof MessagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flow': {
      id: '/flow'
      path: '/flow'
      fullPath: '/flow'
      preLoaderRoute: typeof FlowRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/files': {
      id: '/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof FilesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/tests': {
      id: '/projects/tests'
      path: '/tests'
      fullPath: '/projects/tests'
      preLoaderRoute: typeof ProjectsTestsRouteImport
      parentRoute: typeof ProjectsRoute
    }
    '/projects/tasks': {
      id: '/projects/tasks'
      path: '/tasks'
      fullPath: '/projects/tasks'
      preLoaderRoute: typeof ProjectsTasksRouteImport
      parentRoute: typeof ProjectsRoute
    }
    '/dashboard/reports': {
      id: '/dashboard/reports'
      path: '/reports'
      fullPath: '/dashboard/reports'
      preLoaderRoute: typeof DashboardReportsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/analytics': {
      id: '/dashboard/analytics'
      path: '/analytics'
      fullPath: '/dashboard/analytics'
      preLoaderRoute: typeof DashboardAnalyticsRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardAnalyticsRoute: typeof DashboardAnalyticsRoute
  DashboardReportsRoute: typeof DashboardReportsRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAnalyticsRoute: DashboardAnalyticsRoute,
  DashboardReportsRoute: DashboardReportsRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface ProjectsRouteChildren {
  ProjectsTasksRoute: typeof ProjectsTasksRoute
  ProjectsTestsRoute: typeof ProjectsTestsRoute
}

const ProjectsRouteChildren: ProjectsRouteChildren = {
  ProjectsTasksRoute: ProjectsTasksRoute,
  ProjectsTestsRoute: ProjectsTestsRoute,
}

const ProjectsRouteWithChildren = ProjectsRoute._addFileChildren(
  ProjectsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CalendarRoute: CalendarRoute,
  DashboardRoute: DashboardRouteWithChildren,
  FilesRoute: FilesRoute,
  FlowRoute: FlowRoute,
  HomeRoute: HomeRoute,
  MessagesRoute: MessagesRoute,
  NotificationsRoute: NotificationsRoute,
  ProjectsRoute: ProjectsRouteWithChildren,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
